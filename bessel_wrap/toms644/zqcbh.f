      PROGRAM ZQCBH
C
C***DATE WRITTEN   830501   (YYMMDD)
C***REVISION DATE  890801, 930101   (YYMMDD)
C
C                *** A DOUBLE PRECISION ROUTINE ***
C
C     ZQCBH IS A QUICK CHECK ROUTINE FOR THE COMPLEX H BESSEL FUNCTIONS
C     GENERATED BY SUBROUTINE ZBESH.
C
C     ZQCBH GENERATES SEQUENCES OF H BESSEL FUNCTIONS FOR KIND 2 FROM
C     ZBESH AND CHECKS THEM AGAINST ANALYTIC CONTINUATION FORMULAS
C     IN THE (Z,FNU) SPACE:
C
C     KODE = 1 TESTS (ANALYTIC CONTINUATION FORMULAE, I**2 = -1):
C
C     H(FNU,2,Z)=-EXP(I*PI*FNU)*H(FNU,1,-Z),       -PI.LT.ARG(Z).LE.0
C
C               = 2*COS(PI*FNU)*H(FNU,2,-Z) + EXP(I*PI*FNU)*H(FNU,1,-Z),
C
C                                                   0.LT.ARG(Z).LE.PI
C
C     KODE = 2 TESTS FOR KINDS 1 AND 2:
C
C            EXP(-I*Z)*H(FNU,1,Z) = [EXP(-I*Z)*H(FNU,1,Z)]
C
C            EXP( I*Z)*H(FNU,2,Z) = [EXP( I*Z)*H(FNU,2,Z)]
C
C     WHERE THE LEFT SIDE IS COMPUTED WITH KODE = 1 AND THE RIGHT SIDE
C     WITH KODE = 2.
C
C     THE PARAMETER MQC CAN HAVE VALUES 1 (THE DEFAULT) FOR A FASTER,
C     LESS DEFINITIVE TEST OR 2 FOR A SLOWER, MORE DEFINITIVE TEST.
C
C     MACHINE CONSTANTS ARE DEFINED IN FUNCTIONS I1MACH, R1MACH, AND
C     D1MACH. THESE MUST BE SELECTED BY THE USER OR SET ACCORDING TO
C     PROLOGUE INSTRUCTIONS.
C
C     COMPLEX CW, CI, U, V, W, Y, Z, ZN, CSGN
      EXTERNAL ZABS
      DOUBLE PRECISION AA, AB, AER, ALIM, ATOL, AV, CT, DIG, ERR, ELIM,
     * EPS, ER, ERTOL, FNU, FNUL, PI, R, RL, RM, D1M4, D1M5, R2, ST,
     * T, TOL, TS, XNU, D1MACH, SLAK, FILM, STR, STI, UR, UI, VR, VI,
     * WR, WI, YR, YI, CWR, CWI, CSGNR, CSGNI, ZR, ZI, ZNR, ZNI, ZABS
      INTEGER I, ICASE, IERR, IHP, IL, IR, IRB, IT, ITL, K, KODE, KK,
     *K1, K2, LFLG, LUN, MFLG, M, N, NU, NZ1, NZ2, NZ3, I1MACH, KEPS,
     *MQC, NL, NUL, KDO
      DIMENSION T(20), AER(20), XNU(20), UR(20), UI(20), VR(20), VI(20),
     * WR(20), WI(20), YR(20), YI(20), KEPS(20), KDO(20)
      DATA LUN /7/
      PARAMETER (MQC=1)
      OPEN(LUN,FILE='ZQCBH.OUT')
C-----------------------------------------------------------------------
C     SET PARAMETERS RELATED TO MACHINE CONSTANTS.
C     TOL IS THE APPROXIMATE UNIT ROUNDOFF LIMITED TO 1.0E-18.
C     ELIM IS THE APPROXIMATE EXPONENTIAL OVER- AND UNDERFLOW LIMIT.
C     EXP(-ELIM).LT.EXP(-ALIM)=EXP(-ELIM)/TOL    AND
C     EXP(ELIM).GT.EXP(ALIM)=EXP(ELIM)*TOL       ARE INTERVALS NEAR
C     UNDERFLOW AND OVERFLOW LIMITS WHERE SCALED ARITHMETIC IS DONE.
C     RL IS THE LOWER BOUNDARY OF THE ASYMPTOTIC EXPANSION FOR LARGE Z.
C     DIG = NUMBER OF BASE 10 DIGITS IN TOL = 10**(-DIG).
C     FNUL IS THE LOWER BOUNDARY OF THE ASYMPTOTIC SERIES FOR LARGE FNU
C-----------------------------------------------------------------------
      D1M4 = D1MACH(4)
      TOL = MAX(D1M4,1.0D-18)
      AA = -DLOG10(D1M4)
      K1 = I1MACH(15)
      K2 = I1MACH(16)
      D1M5 = D1MACH(5)
      K = MIN(IABS(K1),IABS(K2))
      ELIM = 2.303D0*(DBLE(FLOAT(K))*D1M5-3.0D0)
      AB = AA*2.303D0
      ALIM = ELIM + MAX(-AB,-41.45D0)
      DIG = MIN(AA,18.0D0)
      FNUL = 10.0D0 + 6.0D0*(DIG-3.0D0)
      RL = 1.2D0*DIG + 3.0D0
      SLAK = 3.0D0+4.0D0*(-DLOG10(TOL)-7.0D0)/11.0D0
      SLAK = MAX(SLAK,3.0D0)
      ERTOL = TOL*10.0D0**SLAK
      RM = 0.5D0*(ALIM + ELIM)
      RM = MIN(RM,200.0D0)
      RM = MAX(RM,RL+10.0D0)
      R2 = MIN(FNUL,RM)
C-----------------------------------------------------------------------
      WRITE (LUN,99999)
99999 FORMAT (' QUICK CHECK ROUTINE FOR THE H BESSEL FUNCTIONS FROM ZBES
     *H'/)
      WRITE (LUN,99998)
99998 FORMAT (' PARAMETERS TOL,ELIM,ALIM,RL,FNUL,DIG')
      WRITE (LUN,99997) TOL, ELIM, ALIM, RL, FNUL, DIG
99997 FORMAT (6D12.4/)
      ATOL = 100.0D0*TOL
      PI = 4.0D0*DATAN(1.0D0)
      WRITE (LUN,99996) MQC
99996 FORMAT (/' CHECKS IN THE (Z,FNU) SPACE WITH MQC = ',I2/)
C-----------------------------------------------------------------------
C     TEST VALUES OF Z IN -PI.LT.ARG(Z).LE.PI NEAR FORMULA BOUNDARIES
C-----------------------------------------------------------------------
C-----------------------------------------------------------------------
C     KDO(K), K=1,IL  DETERMINES WHICH OF THE IL ANGLES IN -PI TO PI
C     ARE USE TO COMPUTE VALUES OF Z
C       KDO(K) = 0  MEANS THAT THE INDEX K WILL BE USED FOR ONE OR TWO
C                   VALUES OF Z, DEPENDING ON THE CHOICE OF KEPS(K)
C              = 1  MEANS THAT THE INDEX K AND THE CORRESPONDING ANGLE
C                   WILL BE SKIPPED
C     KEPS(K), K=1,IL DETERMINES WHICH OF THE ANGLES GET INCREMENTED
C     UP AND DOWN TO PUT VALUES OF Z IN REGIONS WHERE DIFFERENT
C     FORMULAE ARE USED.
C       KEPS(K) =0  MEANS THAT THE ANGLE WILL BE USED WITHOUT CHANGE
C               =1  MEANS THAT THE ANGLE WILL BE INCREMENTED UP AND
C                   DOWN BY EPS
C     THE ANGLES TO BE USED ARE STORED IN THE T(I) ARRAY, I=1,ITL
C-----------------------------------------------------------------------
      IF (MQC.NE.2) THEN
        NL=2
        IL=5
        DO 5 I=1,IL
          KEPS(I)=0
          KDO(I)=0
    5   CONTINUE
        NUL=5
        XNU(1) = 0.0D0
        XNU(2) = 1.0D0
        XNU(3) = 2.0D0
        XNU(4) = 0.5D0*FNUL
        XNU(5) = FNUL + 1.1D0
      ELSE
        NL=4
        IL=13
        DO 6 I=1,IL
          KDO(I)=0
          KEPS(I)=0
    6   CONTINUE
        KDO(2)=1
        KDO(6)=1
        KDO(8)=1
        KDO(12)=1
        KEPS(3)=1
        KEPS(4)=1
        KEPS(5)=1
        KEPS(9)=1
        KEPS(10)=1
        KEPS(11)=1
        NUL=6
        XNU(1) = 0.0D0
        XNU(2) = 0.6D0
        XNU(3) = 1.3D0
        XNU(4) = 2.0D0
        XNU(5) = 0.5D0*FNUL
        XNU(6) = FNUL + 1.1D0
      ENDIF
      I = 2
      EPS = 0.01D0
      FILM=DBLE(FLOAT(IL-1))
      T(1) = -PI + EPS
      DO 30 K=2,IL
        IF (KDO(K).EQ.0) THEN
          T(I) = PI*DBLE(FLOAT(-IL+2*K-1))/FILM
          IF (KEPS(K).EQ.0) GO TO 20
          TS=T(I)
          T(I) = TS - EPS
          I = I + 1
          T(I) = TS + EPS
   20     CONTINUE
          I = I + 1
        ENDIF
   30 CONTINUE
      ITL = I - 1
      LFLG = 0
      DO 170 KODE=1,2
        DO 160 N=1,NL
          DO 150 NU=1,NUL
            FNU = XNU(NU)
            DO 140 ICASE=1,3
              IRB = MIN(ICASE,2)
              DO 130 IR=IRB,3
                GO TO (50, 60, 70), ICASE
   50           CONTINUE
                R =(EPS*DBLE(FLOAT(3-IR))+2.0D0*DBLE(FLOAT(IR-1)))/2.0D0
                GO TO 80
   60           CONTINUE
                R = (2.0D0*DBLE(FLOAT(3-IR))+R2*DBLE(FLOAT(IR-1)))/2.0D0
                GO TO 80
   70           CONTINUE
                IF (R2.GE.RM) GO TO 140
                R = (R2*DBLE(FLOAT(3-IR))+RM*DBLE(FLOAT(IR-1)))/2.0D0
   80           CONTINUE
                DO 120 IT=1,ITL
                  CT = COS(T(IT))
                  ST = SIN(T(IT))
                  IF (ABS(CT).LT.ATOL) CT = 0.0D0
                  IF (ABS(ST).LT.ATOL) ST = 0.0D0
                  ZR = R*CT
                  ZI = R*ST
                  IF (KODE.EQ.1) THEN
                    M=2
                    CALL ZBESH(ZR,ZI,FNU,KODE,M,N,YR,YI,NZ1,IERR)
                    IF (IERR.NE.0.OR.NZ1.NE.0) GO TO 120
                    IF (ST.LT.0.0D0 .OR. (ST.EQ.0.0D0.AND.CT.GT.0.0D0))
     *              THEN
                      IHP = 1
                      ZNR = -ZR
                      ZNI = -ZI
                      M=1
                      CALL ZBESH(ZNR,ZNI,FNU,KODE,M,N,WR,WI,NZ2,IERR)
                      IF (IERR.NE.0.OR.NZ2.NE.0) GO TO 120
                    ELSE
                      IHP = 2
                      ZNR = -ZR
                      ZNI = -ZI
                      M=2
                      CALL ZBESH(ZNR,ZNI,FNU,KODE,M,N,WR,WI,NZ3,IERR)
                      IF (IERR.NE.0.OR.NZ3.NE.0) GO TO 120
                      M=1
                      CALL ZBESH(ZNR,ZNI,FNU,KODE,M,N,VR,VI,NZ2,IERR)
                      IF (IERR.NE.0.OR.NZ2.NE.0) GO TO 120
                    ENDIF
                    AB=MOD(FNU,2.0D0)*PI
                    CSGNR = COS(AB)
                    CSGNI = SIN(AB)
                    MFLG = 0
                    DO 100 I=1,N
                      AB = FNU+DBLE(FLOAT(I-1))
                      AA = MAX(0.5D0,AB)
                      IF (IHP.EQ.1) THEN
                        VR(I) = -(CSGNR*WR(I)-CSGNI*WI(I))
                        VI(I) = -(CSGNR*WI(I)+CSGNI*WR(I))
                        CWR = YR(I) - VR(I)
                        CWI = YI(I) - VI(I)
                      ELSE
                        CWR = CSGNR+CSGNR
                        STR =   CWR*WR(I) + CSGNR*VR(I)-CSGNI*VI(I)
                        VI(I) = CWR*WI(I) + CSGNR*VI(I)+CSGNI*VR(I)
                        VR(I) = STR
                        CWR = YR(I) - VR(I)
                        CWI = YI(I) - VI(I)
                      ENDIF
                      AV = ZABS(YR(I),YI(I))
                      ER = ZABS(CWR,CWI)
                      IF(ZI.EQ.0.0D0) THEN
                        IF(ABS(ZR).LT.AA) ER = ER/AV
                      ELSE
                        ER = ER/AV
                      ENDIF
                      AER(I) = ER
                      IF (ER.GT.ERTOL) MFLG = 1
                      CSGNR = -CSGNR
                      CSGNI = -CSGNI
  100               CONTINUE
                  ELSE
                    M=1
                    KK=1
                    CALL ZBESH(ZR,ZI,FNU,KK,M,N,UR,UI,NZ1,IERR)
                    IF (IERR.NE.0.OR.NZ1.NE.0) GO TO 120
                    CALL ZBESH(ZR,ZI,FNU,KODE,M,N,VR,VI,NZ2,IERR)
                    IF (IERR.NE.0.OR.NZ2.NE.0) GO TO 120
                    M=2
                    KK=1
                    CALL ZBESH(ZR,ZI,FNU,KK,M,N,WR,WI,NZ1,IERR)
                    IF (IERR.NE.0.OR.NZ1.NE.0) GO TO 120
                    CALL ZBESH(ZR,ZI,FNU,KODE,M,N,YR,YI,NZ2,IERR)
                    IF (IERR.NE.0.OR.NZ2.NE.0) GO TO 120
                    ZNR = -ZI
                    ZNI =  ZR
                    CALL ZEXP(ZNR,ZNI,ZNR,ZNI)
                    MFLG = 0
                    DO 105 I=1,N
                      AB = FNU+DBLE(FLOAT(I-1))
                      AA = MAX(0.5D0,AB)
                      CALL ZDIV(UR(I),UI(I),ZNR,ZNI,STR,STI)
                      CWR = STR - VR(I)
                      CWI = STI - VI(I)
                      AV = ZABS(VR(I),VI(I))
                      ER = ZABS(CWR,CWI)
                      IF(ZI.EQ.0.0D0) THEN
                        IF(ABS(ZR).LT.AA) ER = ER/AV
                      ELSE
                        ER = ER/AV
                      ENDIF
                      ERR = ER
                      IF (ER.GT.ERTOL) MFLG = 1
                      CWR = ZNR*WR(I) - ZNI*WI(I) - YR(I)
                      CWI = ZNR*WI(I) + ZNI*WR(I) - YI(I)
                      AV = ZABS(YR(I),YI(I))
                      ER = ZABS(CWR,CWI)
                      IF(ZI.EQ.0.0D0) THEN
                        IF(ABS(ZR).LT.AA) ER = ER/AV
                      ELSE
                        ER = ER/AV
                      ENDIF
                      IF (ER.GT.ERTOL) MFLG = 1
                      AER(I) = ER+ERR
  105               CONTINUE
                  ENDIF
                  IF (MFLG.EQ.0) GO TO 120
                  IF (LFLG.EQ.1) GO TO 110
                  WRITE (LUN,99995) ERTOL
99995             FORMAT (/' CASES WHICH VIOLATE THE RELATIVE ERROR TEST
     * WITH ERTOL =', D12.4/)
                  WRITE (LUN,99994)
99994             FORMAT (/' OUTPUT FORMAT'/' KODE,N,IR,IT,ICASE')
                  WRITE (LUN,99993)
99993             FORMAT (' ER(K),K=1,N'/' Z,FNU,V(1),Y(1)')
                  LFLG = 1
  110             CONTINUE
                  WRITE (LUN,99992) KODE, N, IR, IT, ICASE
99992             FORMAT (5I5)
                  WRITE (LUN,99991) (AER(K),K=1,N)
                  WRITE (LUN,99991) ZR,ZI,FNU,VR(1),VI(1),YR(1),YI(1)
99991             FORMAT (7D12.4)
  120           CONTINUE
  130         CONTINUE
  140       CONTINUE
  150     CONTINUE
  160   CONTINUE
  170 CONTINUE
      IF (LFLG.EQ.0) WRITE (LUN,99990)
99990 FORMAT (/' QUICK CHECKS OK'/)
      STOP
      END
